import { PostgresColumnDTO } from "../../domain/@shared/dto/postgres-column-dto"

export class PostgresStringConverter {
  static pgToTsTypeMap: { [key: string]: string } = {
    'smallint': 'number',
    'integer': 'number',
    'bigint': 'number',
    'decimal': 'number',
    'numeric': 'number',
    'real': 'number',
    'double precision': 'number',
    'smallserial': 'number',
    'serial': 'number',
    'bigserial': 'number',
    'money': 'string',
    'character': 'string',
    'character varying': 'string',
    'text': 'string',
    'bytea': 'Buffer',
    'date': 'string',
    'time without time zone': 'Date',
    'time with time zone': 'Date',
    'timestamp without time zone': 'Date',
    'timestamp with time zone': 'Date',
    'interval': 'string',
    'boolean': 'boolean',
    'uuid': 'string',
    'json': 'any',
    'jsonb': 'any',
    'xml': 'string',
    'point': 'string',
    'line': 'string',
    'lseg': 'string',
    'box': 'string',
    'path': 'string',
    'polygon': 'string',
    'circle': 'string',
    'cidr': 'string',
    'inet': 'string',
    'macaddr': 'string',
    'bit': 'string',
    'bit varying': 'string',
    'tsquery': 'string',
    'tsvector': 'string',
    'int4range': 'string',
    'int8range': 'string',
    'numrange': 'string',
    'tsrange': 'string',
    'tstzrange': 'string',
    'daterange': 'string'
  }

  static mockToPgType: { [key: string]: string } = {
    'smallint': 'faker.number.int()',
    'integer': 'faker.number.int()',
    'bigint': 'faker.number.int()',
    'decimal': 'faker.number.float()',
    'numeric': 'faker.number.float()',
    'real': 'faker.number.float()',
    'double precision': 'faker.number.bigInt()',
    'smallserial': 'faker.number.float()',
    'serial': 'faker.number.float()',
    'bigserial': 'faker.number.float()',
    'money': 'faker.finance.currency().code',
    'character': 'faker.string.sample()',
    'character varying': 'faker.string.sample()',
    'text': 'faker.lorem.text()',
    'bytea': 'new Buffer(faker.string.sample())',
    'date': 'new Date()',
    'time without time zone': 'new Date()',
    'time with time zone': 'new Date()',
    'timestamp without time zone': 'new Date()',
    'timestamp with time zone': 'new Date()',
    'interval': 'faker.string.sample()',
    'boolean': 'false',
    'uuid': 'faker.string.uuid()',
    'json': '{}',
    'jsonb': '{}',
    'xml': 'faker.lorem.text()',
    'point': 'faker.string.sample()',
    'line': 'faker.string.sample()',
    'lseg': 'faker.string.sample()',
    'box': 'faker.string.sample()',
    'path': 'faker.string.sample()',
    'polygon': 'faker.string.sample()',
    'circle': 'faker.string.sample()',
    'cidr': 'faker.string.sample()',
    'inet': 'faker.string.sample()',
    'macaddr': 'faker.string.sample()',
    'bit': 'faker.string.sample()',
    'bit varying': 'faker.string.sample()',
    'tsquery': 'faker.string.sample()',
    'tsvector': 'faker.string.sample()',
    'int4range': 'faker.string.sample()',
    'int8range': 'faker.string.sample()',
    'numrange': 'faker.string.sample()',
    'tsrange': 'faker.string.sample()',
    'tstzrange': 'faker.string.sample()',
    'daterange': 'faker.string.sample()'
  }

  static getTsType(pgType: string): string {
    return this.pgToTsTypeMap[pgType] || 'any'
  }


  static getMockByTsType(column: PostgresColumnDTO): string {
    return this.mockToPgType[column.dataType] || '{}'
  }
}